Лабораторная работа № 2
Решение логических задач 
по курсу "Логическое программирование"
Вариант2

Введение
Существует 2 основных метода решения логических задач: первый- это метод порождения и проверок, а второй- метод ветвей и границ, каждый из которых имеет различные реализации. Если говорить о 1-ом методе, то это примитивный способ генерации всевозможных вариантов решения, каждый из которых впоследствии проходит череду проверок, которые отсекают неподходящие варианты, и переходят к проверке следующего варианта. В случае успеха результат возвращается пользователю, и продолжается дальнейшие проверки остальных вариантов. Что касается 2-го метода, то он заключатся в том, что на каждом этапе решения отсекаются огромные классы неподходящих по каким-либо признакам вариантов, и, даже на этапе генерации этих самых этапов, что позволяет делать меньше переборов по ходу программы. Из общего эти методы имеют то, что в каждом способе требуется рассматривать множество возможных решений и отсекать не подходящие варианты. Пролог для решения таких заданий удобен своим уникальным инструментом - бэктрэкингом, позволяющим при каждой неудаче возвращаться на шаг назад, и продолжать поиск в дереве вариантов, используя уже другие значения переменных. Также пролог удобен простотой указания требований к вариантам решений, ведь достаточно просто указать предикат, который должен быть истинным или ложным для искомого варианта.
Задание
2. В одном городе живут семь любителей птиц. И фамилии у них птичьи. Каждый из них – «тезка» птицы, которой владеет один из его товарищей. У троих из них живут птицы, которые темнее, чем пернатые тезки их хозяев. Тезка птицы, которая живет у Воронова, женат. Голубев и Канарейкин – единственные холостяки из всей компании. Хозяин грача женат на сестре жены Чайкина. Невеста хозяина ворона очень не любит птицу, с которой возится ее жених. Тезка птицы, которая живет у Грачева, - хозяин канарейки. Птица, которая является тезкой владельца попугая, принадлежит тезке той птицы, которой владеет Воронов. У голубя и попугая оперение светлое. Кому принадлежит скворец?


Принцип решения 

Задаем начальные условия задачи: 

%что тезка каждой из птиц – человек с аналогичной фамилией.
tezka(voron,voronov).
tezka(golub,golubev).
tezka(kanareika,kanareikin).
tezka(grach,grachev).
tezka(chaika,chaikin).
tezka(popugai,popugaev).
tezka(skvorec,skvorcov).

solve(Ans,VladelecSkvorca):- Ans=[voronov/A,golubev/B,kanareikin/C,grachev/D,chaikin/E,popugaev/F,skvorcov/G],

%используем стандартный предикат permutation, чтобы создать все возможные перестановки соответствия владельцев и птиц    permutation([voron,golub,kanareika,grach,chaika,popugai,skvorec],[A,B,C,D,E,F,G]),
A\=voron,B\=golub,C\=kanareika,D\=grach,E\=chaika,F\=popugai,G\=skvorec,

%темные – это ворон, грач и скворец
Dark=[voron,grach,skvorec],
   
%используя в том числе стандартный предикат member, задаем оставшиеся условия задачи: 
member(VladelecVorona/voron,Ans),tezka(TezkaVV,VladelecVorona),not(member(TezkaVV,Dark)),
member(VladelecGracha/grach,Ans),tezka(TezkaVG,VladelecGracha),not(member(TezkaVG,Dark)),
member(VladelecSkvorca/skvorec,Ans),tezka(TezkaVS,VladelecSkvorca),not(member(TezkaVS,Dark)),

%тезка А женат, а Голубев, Канарейкин холостяки 
not(tezka(A,golubev)),not(tezka(A,kanareikin)),

%по условиям задачи хозяин грача женат    
B\=grach,C\=grach,

%не может быть женат на сестре своей жены
VladelecGracha\=chaikin,

%раз у хозяина ворона есть невеста, то это кто-то из неженатых
(B=voron ; C=voron),

%тезка птицы Грачева – хозяин канарейки
tezka(D,VladelecKanareiki),member(VladelecKanareiki/kanareika,Ans),

%тезка, которая является…
member(VladelecPopugaya/popugai,Ans),tezka(TezkaVP,VladelecPopugaya),
member(VladelecTezkiVP/TezkaVP,Ans),tezka(TezkaVTVP,VladelecTezkiVP),
member(voronov/TezkaVTVP,Ans).

Результат работы программы

solve(X,Y).
X = [voronov/chaika, golubev/kanareika, kanareikin/voron, grachev/golub, chaikin/skvorec, popugaev/grach, skvorcov/popugai],
Y = chaikin

Вывод 

Prolog подходит для решения подобных логических задач, где нужно перебрать все возможные варианты, а затем отсечь неподходящие к условиям задачи. Таким образом, мы находим решение задачи. Это гораздо проще и занимает меньше времени, чем, если бы мы вручную перебирали  все варианты.

